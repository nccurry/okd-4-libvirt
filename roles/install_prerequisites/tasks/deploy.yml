- name: Update packages
  become: true
  dnf:
    name: "*"
    state: latest

- name: Install prerequisite packages
  become: true
  dnf:
    name: "{{ item }}"
  loop:
  # Needed for libvirt
  - "@Virtualization"
  # Needed for virt ansible module
  - python3-libvirt
  # Needed to unarchive xz files
  - xz
  # Needed to unarchife gz files
  - gzip

- name: Start / enable libvirtd
  become: true
  systemd:
    name: libvirtd
    enabled: true
    state: started

- name: Check if fcos qcow2 is already present
  stat:
    path: "{{ libvirt_domain_path }}/images/fcos-{{ fcos_build }}.qcow2.xz"
  register: fcos_stat

- block:
  - name: Download fcos qcow2 image
    get_url:
      url: "{{ fcos_qcow2_url }}"
      dest: "{{ libvirt_domain_path }}/images/fcos-{{ fcos_build }}.qcow2.xz"
    register: get_fcos

  - name: Unarchive fcos image
    command:
      cmd: "unxz fcos-{{ fcos_build }}.qcow2.xz"
      chdir: "{{ libvirt_domain_path }}/images"
    when: get_fcos.changed
  when: not fcos_stat.stat.exists

- name: Check if rhcos qcow2 is already present
  stat:
    path: "{{ libvirt_domain_path }}/images/rhcos-{{ rhcos_build }}.qcow2"
  register: rhcos_stat

- block:
  - name: Download rhcos qcow2 image
    get_url:
      url: "{{ rhcos_qcow2_url }}"
      dest: "{{ libvirt_domain_path }}/images/rhcos-{{ rhcos_build }}.qcow2.gz"
    register: get_rhcos

  - name: Unarchive rhcos image
    command:
      cmd: "gunzip rhcos-{{ rhcos_build }}.qcow2.gz"
      chdir: "{{ libvirt_domain_path }}/images"
    when: get_rhcos.changed
  when: install_type == 'openshift' and not rhcos_stat.stat.exists

- name: Check if oc is already installed
  stat:
    path: "{{ lookup('env', 'HOME') }}/bin/oc-{{ oc_release }}"
  register: oc_stat

- name: Download and install oc
  when: not oc_stat.stat.exists
  block:
  - name: Download oc cli archive
    get_url:
      url: "{{ oc_url }}"
      dest: "/tmp/oc-{{ oc_release }}.tar.gz"

  - name: Unarchive oc cli tools
    unarchive:
      src: "/tmp/oc-{{ oc_release }}.tar.gz"
      dest: /tmp

  - name: Ensure binary directory exists
    file:
      state: directory
      path: "{{ lookup('env', 'HOME') }}/bin"

  - name: Move oc cli to binary directory
    copy:
      src: /tmp/oc
      dest: "{{ lookup('env', 'HOME') }}/bin/oc-{{ oc_release }}"
      owner: "{{ lookup('env', 'USER') }}"
      group: "{{ lookup('env', 'USER') }}"
      mode: 0774

  - name: Create symlink to oc cli
    file:
      state: link
      force: yes
      src: "{{ lookup('env', 'HOME') }}/bin/oc-{{ oc_release }}"
      dest: "{{ lookup('env', 'HOME') }}/bin/oc"

- name: Check if openshift-install is already installed
  stat:
    path: "{{ lookup('env', 'HOME') }}/bin/openshift-install-{{ ocp_release }}"
  register: ocp_stat

- name: Download and install openshift-install
  when: not ocp_stat.stat.exists
  block:
  - name: Download openshift-install archive
    get_url:
      url: "{{ ocp_url }}"
      dest: "/tmp/openshift-install-{{ ocp_release }}.tar.gz"

  - name: Unarchive oc cli tools
    unarchive:
      src: "/tmp/openshift-install-{{ ocp_release }}.tar.gz"
      dest: /tmp

  - name: Ensure binary directory exists
    file:
      state: directory
      path: "{{ lookup('env', 'HOME') }}/bin"

  - name: Move openshift-install cli to binary directory
    copy:
      src: /tmp/openshift-install
      dest: "{{ lookup('env', 'HOME') }}/bin/openshift-install-{{ ocp_release }}"
      owner: "{{ lookup('env', 'USER') }}"
      group: "{{ lookup('env', 'USER') }}"
      mode: 0774

  - name: Create symlink to openshift-install cli
    file:
      state: link
      force: yes
      src: "{{ lookup('env', 'HOME') }}/bin/openshift-install-{{ ocp_release }}"
      dest: "{{ lookup('env', 'HOME') }}/bin/openshift-install"

# TODO: Create logic to download okd-install

- name: Create libvirt group
  become: true
  group:
    name: libvirt

- name: Add user to libvirt group
  become: true
  user:
    name: "{{ lookup('env', 'USER') }}"
    groups: libvirt
    append: yes