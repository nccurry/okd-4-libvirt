- name: Check vm image
  stat:
    path: "{{ libvirt_domain_path }}/{{ vm_name }}.qcow2"
  register: vm_disk_stat

- name: Clone template image
  copy:
    src: "{{ libvirt_domain_path }}/{{ image_name }}"
    dest: "{{ libvirt_domain_path }}/{{ vm_name}}.qcow2"
  when: not vm_disk_stat.stat.exists

- name: Get domain info
  virt:
    command: info
  register: domain_info

- block:
  - name: Check disk size
    command: "qemu-img
              info
              --output json
              {{ libvirt_domain_path }}/{{ vm_name }}.qcow2"
    changed_when: false
    register: disk_info

  - name: Resize disk
    vars:
      # Convert bytes to GB
      current_size_gb: "{{ (disk_info.stdout | from_json)['virtual-size'] | int / 1073741824 }}"
      # Convert to number by trimming trailing G
      disired_size_gb: "{{ vm_disk_size | regex_replace ('G', '') }}"
    command: "qemu-img
              resize
              {{ libvirt_domain_path }}/{{ vm_name }}.qcow2
              {{ vm_disk_size }}"
    register: disk_resize
    changed_when: "'Image resized' in disk_resize.stdout"
    failed_when: disk_resize.rc != 0
    # When the difference is more than a little off, resize
    when: (current_size_gb | int - disired_size_gb | int) | abs > 1

  # https://github.com/jedi4ever/veewee/issues/996
  - name: Set disk acl to allow qemu to access
    acl:
      path: "{{ libvirt_domain_path }}/{{ vm_name }}.qcow2"
      entity: qemu
      etype: user
      permissions: rw
      state: present
    # Only resize disk when vm doesn't already exist
  when: "'{{ vm_name }}' not in domain_info"

- name: Generate ignition file
  copy:
    content: "{{ ignition_config | to_nice_json }}"
    dest: "{{ libvirt_domain_path }}/{{ vm_name }}.ign"
    setype: svirt_home_t
  when: ignition_path == ''

- name: Set ignition path
  set_fact:
    ignition_path: "{{ libvirt_domain_path }}/{{ vm_name }}.ign"
  when: ignition_path == ''

- name: Create domain
  virt:
    command: define
    xml: "{{ lookup('template', 'domain.xml.j2') }}"
  register: create_domain

- name: Start domain
  virt:
    state: running
    name: "{{ vm_name }}"
  # Sometimes this task will fail with "Failed to get "write" lock" error
  failed_when: false
  when: create_domain.changed

# Fallback when virt module doesn't work
#- name: Create domain
#  command:
#    cmd: "virt-install
#          --connect qemu:///system
#          -n {{ vm_name }}
#          --memory {{ vm_memory }}
#          --vcpus {{ vm_cpus }}
#          --import
#          --os-variant=fedora{{ fedora_version }}
#          --disk {{ libvirt_domain_path }}/{{ vm_name }}.qcow2
#          --network network={{ vm_network_name }},model=virtio,mac={{ vm_mac }}
#          --graphics=none
#          --qemu-commandline=\"-fw_cfg name=opt/com.coreos/config,file={{ ignition_path }}\"
#          --noautoconsole"
