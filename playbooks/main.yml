#!/usr/bin/env ansible-playbook
---
- name: Administer okd
  hosts: "{{ libvirt_host }}"
  gather_facts: false
  vars_files:
  - "{{ playbook_dir }}/../defaults/main.yml"
  - "{{ playbook_dir }}/../vars/main.yml"
  pre_tasks:
  - name: Install/configure prerequisites
    tags:
    - install_prerequisites
    - never
    import_role:
      name: install_prerequisites
  tasks:
  - name: Create libvirt network
    virt_net:
      command: define
      autostart: yes
      name: "{{ cluster_name }}.{{ network.domain_suffix }}"
      xml: "{{ lookup('template', playbook_dir + '/../templates/libvirt-network.xml.j2') }}"

  - name: Start libvirt network
    virt_net:
      autostart: yes
      state: active
      name: "{{ cluster_name }}.{{ network.domain_suffix }}"

  - name: Create ssh directory
    file:
      state: directory
      path: "{{ libvirt_domain_path }}/{{ cluster_name }}/.ssh"

  - name: Generate ssh keypair
    openssh_keypair:
      path: "{{ libvirt_domain_path }}/{{ cluster_name }}/.ssh/{{ cluster_name }}"
      mode: 0400
    register: ssh_key

  - name: Generate ignition files
    import_role:
      name: generate_ignition_files

  - name: Check existing utility disk
    stat:
      path: "{{ libvirt_domain_path }}/{{ cluster_name }}/{{ item.name }}.qcow2"
    register: utility_disk_stats
    loop: "{{ utility_vms }}"

  - name: Clone utility os disks
    copy:
      src: "{{ libvirt_domain_path }}/images/fcos-{{ fcos_build }}.qcow2"
      dest: "{{ libvirt_domain_path }}/{{ cluster_name }}/{{ item.name }}.qcow2"
    # All disk_stats results that don't exist
    loop: "{{ utility_disk_stats.results
            | selectattr('stat.exists', 'equalto', false)
            | map(attribute='item')
            | list }}"

  - name: Resize base utility disks
    command: "qemu-img
              resize
              {{ libvirt_domain_path }}/{{ cluster_name }}/{{ item.name }}.qcow2
              {{ item.disk_size }}"
    register: disk_resize
    changed_when: "'Image resized' in disk_resize.stdout"
    failed_when: disk_resize.rc != 0
    # All disk_stats results that don't exist
    loop: "{{ utility_disk_stats.results
            | selectattr('stat.exists', 'equalto', false)
            | map(attribute='item')
            | list }}"

  - name: Check existing cluster disks
    stat:
      path: "{{ libvirt_domain_path }}/{{ cluster_name }}/{{ item.name }}.qcow2"
    register: cluster_disk_stats
    loop: "{{ bootstrap_vms + master_vms + worker_vms }}"

  - name: Clone cluster os disks
    vars:
      disk_type: "{{ (install_type == 'openshift')
                    | ternary('rhcos-' + rhcos_build + '.qcow2', 'fcos-' + fcos_build + '.qcow2') }}"
    copy:
      src: "{{ libvirt_domain_path }}/images/{{ disk_type }}"
      dest: "{{ libvirt_domain_path }}/{{ cluster_name }}/{{ item.name }}.qcow2"
    # All disk_stats results that don't exist
    loop: "{{ cluster_disk_stats.results
            | selectattr('stat.exists', 'equalto', false)
            | map(attribute='item')
            | list }}"

  - name: Resize base cluster disks
    command: "qemu-img
              resize
              {{ libvirt_domain_path }}/{{ cluster_name }}/{{ item.name }}.qcow2
              {{ item.disk_size }}"
    register: disk_resize
    changed_when: "'Image resized' in disk_resize.stdout"
    failed_when: disk_resize.rc != 0
    # All disk_stats results that don't exist
    loop: "{{ cluster_disk_stats.results
            | selectattr('stat.exists', 'equalto', false)
            | map(attribute='item')
            | list }}"

# This doesn't work for some reason
#  - name: Create hosts
#    virt:
#      command: define
#      xml: "{{ lookup('template', playbook_dir + '/../templates/libvirt-vm.xml.j2') }}"
#    loop: "{{ utility_vms }}"
#
#  - name: Start vms
#    virt:
#      state: running
#      name: "{{ item.name }}"
#    loop: "{{ utility_vms }}"

  # TODO: Do this with virt module
  - name: Create hosts
    command:
      cmd: "virt-install
            --connect qemu:///system
            -n {{ item.name }}
            --memory {{ item.memory }}
            --vcpus {{ item.cpus }}
            --import
            --os-variant=fedora{{ fedora_version }}
            --disk {{ libvirt_domain_path }}/{{ cluster_name }}/{{ item.name }}.qcow2
            --network network={{ cluster_name }}.{{ network.domain_suffix }},model=virtio,mac={{ item.mac }}
            --graphics=none
            --qemu-commandline=\"-fw_cfg name=opt/com.coreos/config,file={{ libvirt_domain_path }}/{{ cluster_name }}/{{ item.type }}.ign\"
            --noautoconsole"
    loop: "{{ utility_vms + bootstrap_vms + master_vms + worker_vms }}"

  - name: Create entries in /etc/hosts
    become: true
    blockinfile:
      marker: "<!-- {mark} ANSIBLE MANAGED BLOCK {{ cluster_name }} -->"
      path: /etc/hosts
      block: |
        {{ utility_vms[0].ip }} api.{{ cluster_name }}.{{ network.domain_suffix }}
        {{ utility_vms[0].ip }} oauth-openshift.apps.{{ cluster_name }}.{{ network.domain_suffix }}
        {{ utility_vms[0].ip }} console-openshift-console.apps.{{ cluster_name }}.{{ network.domain_suffix }}
        {{ utility_vms[0].ip }} downloads-openshift-console.apps.{{ cluster_name }}.{{ network.domain_suffix }}
        {{ utility_vms[0].ip }} default-route-openshift-image-registry.apps.{{ cluster_name }}.{{ network.domain_suffix }}
        {{ utility_vms[0].ip }} alertmanager-main-openshift-monitoring.apps.{{ cluster_name }}.{{ network.domain_suffix }}
        {{ utility_vms[0].ip }} grafana-openshift-monitoring.apps.ocp.{{ cluster_name }}.{{ network.domain_suffix }}
        {{ utility_vms[0].ip }} prometheus-k8s-openshift-monitoring.{{ cluster_name }}.{{ network.domain_suffix }}